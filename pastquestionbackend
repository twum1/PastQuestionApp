const express = require('express');
const cors = require('cors');
const multer = require('multer');
const { initializeApp, cert } = require('firebase-admin/app');
const { getStorage, ref, uploadBytes, getDownloadURL } = require('firebase-admin/storage');
const { getFirestore, doc, setDoc, getDoc } = require('firebase-admin/firestore');

// Initialize Firebase Admin SDK
const serviceAccount = {
  type: 'service_account',
  project_id: 'pastquestionapp-b9c52',
  private_key_id: 'ba082c24045d69979571244c3d1f9b92867dc66f',
  private_key: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'), // Use environment variable for private key
  client_email: 'firebase-adminsdk-fbsvc@pastquestionapp-b9c52.iam.gserviceaccount.com',
  client_id: '109147741665598672308',
  auth_uri: 'https://accounts.google.com/o/oauth2/auth',
  token_uri: 'https://oauth2.googleapis.com/token',
  auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs',
  client_x509_cert_url: 'https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40pastquestionapp-b9c52.iam.gserviceaccount.com',
};

initializeApp({
  credential: cert(serviceAccount),
  storageBucket: 'pastquestionapp-b9c52.appspot.com',
});

const db = getFirestore();
const storage = getStorage();

const app = express();
app.use(cors());
app.use(express.json());

const upload = multer({ storage: multer.memoryStorage() });

// Upload endpoint
app.post('/upload', upload.single('file'), async (req, res) => {
  try {
    const file = req.file;
    const { course, year } = req.body;

    if (!file || !course || !year) {
      return res.status(400).send('Missing required fields');
    }

    // Upload file to Firebase Storage
    const fileRef = ref(storage, `past-questions/${course}-${year}.pdf`);
    await uploadBytes(fileRef, file.buffer);

    // Get download URL
    const downloadURL = await getDownloadURL(fileRef);

    // Save metadata to Firestore
    await setDoc(doc(db, 'past-questions', `${course}-${year}`), {
      course,
      year,
      downloadURL,
    });

    res.status(200).send({ downloadURL });
  } catch (error) {
    console.error(error);
    res.status(500).send('Error uploading file');
  }
});

// Download endpoint
app.get('/download/:course/:year', async (req, res) => {
  try {
    const { course, year } = req.params;

    // Get download URL from Firestore
    const docRef = doc(db, 'past-questions', `${course}-${year}`);
    const docSnap = await getDoc(docRef);

    if (!docSnap.exists()) {
      return res.status(404).send('File not found');
    }

    const { downloadURL } = docSnap.data();
    res.redirect(downloadURL);
  } catch (error) {
    console.error(error);
    res.status(500).send('Error downloading file');
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
